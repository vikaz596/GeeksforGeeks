/**
* created by VIKAS SINGH
* on 4 MAR 2016
* For problem statement visit geeksforgeeks.com under Easy problem section with same name
*/

import java.util.Scanner;
public class GFG {
	
	public static boolean partition(int arr[], int n) {
		int sum = 0;
		int i=0, j=0;

		// Calculate sum of all elements
		for (i = 0; i < n; i++)
			sum += arr[i];
	
		if (sum%2 != 0) 
			return false;

		boolean part[][] = new boolean[sum/2+1][n+1];
	
		// initialize top row as true
		for (i = 0; i <= n; i++)
			part[0][i] = true;
	
		// initialize leftmost column, except part[0][0], as 0
		for (i = 1; i <= sum/2; i++)
			part[i][0] = false;	 
	
		// Fill the partition table in botton up manner 
		for (i = 1; i <= sum/2; i++) {
			for (j = 1; j <= n; j++) {
				part[i][j] = part[i][j-1];
				if (i >= arr[j-1])
					part[i][j] = part[i][j] || part[i - arr[j-1]][j-1];
			}	 
		}	 
		
		return part[sum/2][n];
	}
	
	public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);
		int testCases = stdin.nextInt();
		for(int t=0 ; t<testCases ; t++) {
			int n = stdin.nextInt();
			int arr[] = new int[n];
			for(int i=0 ; i<n ; i++)
				arr[i] = stdin.nextInt();
			
			boolean check = partition(arr,n);
			if(check)
				System.out.println("Can be divided into two subsets of equal sum");
			else
				System.out.println("Cannot be divided into two subsets of equal sum");
		}	
		stdin.close();
	}
}
