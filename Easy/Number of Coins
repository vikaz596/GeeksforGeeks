/**
* created by VIKAS SINGH
* on 4 MAR 2016
* For problem statement visit geeksforgeeks.com under Easy problem section with same name
*/

// A Dynamic Programming based C++ program to find minimum of coins
// to make a given change V
#include<bits/stdc++.h>
using namespace std;

// m is size of coins array (number of different coins)
int minCoins(int coins[], int m, int V)
{
	// table[i] will be storing the minimum number of coins
	// required for i value. So table[V] will have result
	int table[V+1];

	// Base case (If given value V is 0)
	table[0] = 0;

	// Initialize all table values as Infinite
	for (int i=1; i<=V; i++)
		table[i] = INT_MAX;

	// Compute minimum coins required for all
	// values from 1 to V
	for (int i=1; i<=V; i++)
	{
		// Go through all coins smaller than i
		for (int j=0; j<m; j++)
		if (coins[j] <= i)
		{
			int sub_res = table[i-coins[j]];
			if (sub_res != INT_MAX && sub_res + 1 < table[i])
				table[i] = sub_res + 1;
		}
	}
	return table[V];
}

// Driver program to test above function
int main()
{
    int test;
    cin>>test;
    
    while(test>0) {
    
        int v;
        cin>>v;
    
        int m;
        cin>>m;
    
        int coins[1000];
    
        for(int z=0 ; z<m ; z++)
            cin>>coins[z];
        
	    int ans = minCoins(coins,m,v);
	    if(ans<0 || ans>v)
	        cout<<"-1"<<endl;
	    else     
	        cout<<minCoins(coins, m, v)<<endl;
	    
	    test--;
    }    
	return 0;
}
