/**
* created by VIKAS SINGH
* on 4 MAR 2016
* For problem statement visit geeksforgeeks.com under Medium problem section with same name
*/

import java.io.InputStreamReader;
import java.io.BufferedReader;

public class Solution {
	
	public static boolean stringFormation(String str) {
		// Find length of string and create an array to
		// store lps values used in KMP
		int n = str.length();
		int lps[] = new int[n];
 
		// Preprocess the pattern (calculate lps[] array)
		computeLPSArray(str, n, lps);
 
		// Find length of longest suffix which is also
		// prefix of str.
		int len = lps[n-1];
 
		// If there exist a suffix which is also prefix AND
		// Length of the remaining substring divides total
		// length, then str[0..n-len-1] is the substring that
		// repeats n/(n-len) times (Readers can print substring
		// and value of n/(n-len) for more clarity.
		if(len>0 && n%(n-len) == 0)
			return true;
		else
			return false;
	}
	
	public static void computeLPSArray(String str, int n, int lps[]) {
		int len = 0;
		lps[0] = 0;
		int i=1;
		
		while(i<n) {
			if(str.charAt(i) == str.charAt(len)) {
				len++;
				lps[i] = len;
				i++;
			}
			else {
				if(len != 0)
					len = lps[len-1];
				else {
					lps[i] = 0;
					i++;
				}
			}
		}
	}
		
	
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCases = Integer.parseInt(br.readLine());
		for(int t=0 ; t<testCases ; t++) {
			String str = br.readLine();
			if(stringFormation(str))
				System.out.println("True");
			else
				System.out.println("False");
		}
	}
}	
